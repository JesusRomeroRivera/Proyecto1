header {
  background: pink; /* !important:Da prioridad a esta configuración */
  color: red /* Cuando no hay ";", termina la regla */
}

/*
  Regla: Desde el header hasta el cierre de llaves {}
  Selectores:
    -Selector de etiqueta: Afecta a toda la etiqueta
      header - section - article
    -Selector descendente: Afecta a la etiqueta exacta que indiques
      body header div nav ol li a
    -Selector de clase: Equivalente a un id, afecta a elementos que tengan una misma clase
      .link
    -Selector de id: Afecta a elemento con el idea (href)
      #portafolio
  Declaraciones: Todo lo de las llaves en sí
  Propiedades: Cada línea (background - color)
  Valores: El valor asignado
*/
 /*
  Colores: https://developer.mozilla.org/es/docs/Web/CSS/color_value
    -Palabras clave: Red - Blue - etc.
    -Hexadecimales: #000000
      Son 6 dígitos que van del 0 al F(16)
        #123456 --> 12 son rojo - 34 son verde - 56 son azul
    -hls() hlsa()
    -Color más exacto es rgb() o rgba()
  Pixeles:
    -Unidades homogéneas de color - Básicamente manejan el tamaño.
*/

body {
  font-family: "Source Sans Pro", sans-serif;
  margin: 0;
}
/* Font familiy: Tipo de letra - Si no encuentra el 1ro, aplica el 2do
   Cuando son varias palabras entre comillas */
h1,
h2,
h3,
h4,
h5,
h6{
  font-family: "Fjalla One", sans-serif;
  font-weight: normal;
  /* font-style: italic; */
}
/* Aplicar estilo a varias etiquetas con ","
   sans-serif --> Predeterminado*/
/*
  color: El color.
  line-height: Altura desde la base del texto hasta la base de la siguiente línea de texto.
  font-size: Tamaño del texto, admite cualquier unidad de medida disponible.
  letter-spacing: Espaciado entre las letras del texto.
  font-weight: Transparencia (negrita-normal-light) - Se indica en múltiplos de 100 o keywords.
  text-decoration: Decorado (subrayado-tachado-subrayado superior).
  text-transform: Transformar el estado de mayúsculas / minúsculas.
    -uppercase para mayúsculas sostenidas.
    -lowercase para minúsculas sostenidas.
    -capitalize para las primeras letras.
*/

h1 strong{
  color: #026fff;
}

/* Todo lo que empiece con un "."
   son una clase */

.hero {
  height: 300px; /* Es el alto de todo el elemento ".hero" */
  background-image: url(../hero.jpg); /* ../:Salir de la carpeta */
  background-size: 500px 300px;
  /* background-size: width height */
  background-repeat: no-repeat;
  background-position-x: right;
  background-color: #1b2127;
}

h1 {
  font-size: 40px;
  line-height: 1.5; /* 1.5 --> 150% (De 0 a 1 es 0% a 100%) */
  letter-spacing: -.2px;
  /*text-transform: uppercase*/
  /*text-decoration: underline;*/
  color: white;
  margin: 100px 520px 70px 30px;
  /* margin: top right bottom left
  margin: top-bottom right-left
  margin: auto(Mitad en ambos lados)
  El margen entre dos áreas es el margen mayor de una de ellas */
}

.portfolio{
  background: #fafafa;
}

.project {
  /*
    border-top: 10px solid red;
    border-right: 10px solid green;
    border-left: 10px solid orange;
    border-bottom: 10px solid pink;
    border (top-left-right-bottom): tamaño - tipo - estilo.
    border-top-color: red;
    border-width: 15px;
    border-style: solid;
  */
  border: 1px solid gray;
  border-radius: 10px;
  /* border-top-left-radius:50px; */
  /* Por alguna razón que hasta ahora no explico
     el borde también afecta de modo independiente
     a la imagenContainer... */
  margin: 10px;
  margin-bottom: 15px;
  /* Solo margen abajo */
  padding: 20px;
  /* padding: el relleno, cumple la misma función question
     el margin, al padding le afecta el background, y los
     separa el borde. */
  background: white;
}

/*
  Modelo de caja es básicamente el conjunto de margin - border - padding y el elemento
  El ancho es solo el elemento - padding - border
  box-sizing:border-box: El ancho solo será el que le demos, jamás crecerá.
*/
.project-details {
  width: 500px;
}
.project-imageContainer {
  width: 500px;
}

/*
  background: Le da pie a las demás funciones. - Respecta al fondo.
  background-image: Url que se usará como fondo del elemento.
  background-color: Color de fondo.
  background-size: Valores de alto y ancho.
    -cover:
    -contain:
  background-position: Posición de la imagen dentro del elemento - Unidades de medida.
    -center: Centro
    -left: Izquierda
    -top: Arriba
    -right: Derecha
  background-repeat: Método de repetición de la imagen de fondo.
    -repeat: Que se repita normal.
    -repeat-x: Que se repita en el eje X.
    -repeat-y: Que se repita en el eje Y.
    -no-repeat: Que no se repita.
*/

.header{
  background-color: #1b2127;
  color: white;
}

.header a{
  color: white;
  text-decoration: none; /* Ya no se ponen moraditos */
}

/*
  block: el elemento intenta abarcar todo el ancho posible.
  inline: lo pone en linea, descartando las propiedades width y height.
  inline-block: combina block e inline, respeta dimensiones indicadas width y height.
    Coloca el elemento en línea (al costado) de elementos que tengan display: inline o inline-block.
  flex: asume algunas propiedades por defecto que favorecen la alineación de los elementos internos.
  grid: similar a flex, asume algunas propiedades por defecto organizando los contenidos en filas y columnas.
  none: oculta el elemento.
*/

/*
  Propiedades de flexbox: https://platzi.com/clases/1350-html5-css3/13369-propiedades-de-flexbox/
  flex: es como "estrecho" - display: flex
  flex-wrap: nowrap --> por defecto
  flex-wrap: wrap --> Si no hay más ancho, van cayendo los elementos
  flex-shrink: qué tanto se pueden encoger los elementos
  flex-direction: column - row(Horizontal)
*/

/*
  flex-start: alinea elementos al inicio del espacio.
  flex-end: alinea elementos al final, a la derecha.
  center: alinea elementos al centro del espacio.
  space-between: distribuye elementos con espacio proporcional entre ellos.
  space-evenly: distribuye elementos con espacio proporcional e igual entre ellos
    (incluyendo el primer y último elementos con respecto a los estremos del espacio disponible).
  space-around: similar a space-evenly pero tanto en el primero como en el último elemento,
    el espacio hacia los extremos es la mitad del espacio usado entre los elementos.
*/

/*
  Para jugar con el flex se usa justify-content(H) y align-items(V)
  Si en caso flex-direction: column - Se invierten los papeles de H y V
  Y por último, todo flex se hace en el elemento padre, para que afecta a sus hijos
  y a sus hijos los tocamos de manera independiente
*/
